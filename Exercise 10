#Exercise 10
#List Overlap Comprehensions
#
# This week’s exercise is going to be revisiting an old exercise (see Exercise 5), except require the solution in a different way.
# Take two lists, say for example these two:
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
# and write a program that returns a list that contains only the elements that are common between the lists (without duplicates).
# Make sure your program works on two lists of different sizes.
# Write this in one line of Python using at least one list comprehension. (Hint: Remember list comprehensions from Exercise 7).
# The original formulation of this exercise said to write the solution using one line of Python,
# but a few readers pointed out that this was impossible to do without using sets that I had not yet discussed on the blog,
# so you can either choose to use the original directive and read about the set command in Python 3.3,
# or try to implement this on your own and use at least one list comprehension in the solution.
#
# Extra:
# Randomly generate two lists to test this

#Set Types — set, frozenset
#A set object is an unordered collection of distinct hashable objects.
# Common uses include membership testing, removing duplicates from a sequence,
# and computing mathematical operations such as intersection, union, difference, and symmetric difference.
# Like other collections, sets support x in set, len(set), and for x in set.
# Being an unordered collection, sets do not record element position or order of insertion.
# Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.
# There are currently two built-in set types, set and frozenset.
# The set type is mutable — the contents can be changed using methods like add() and remove().
# Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set.
# The frozenset type is immutable and hashable — its contents cannot be altered after it is created;
# it can therefore be used as a dictionary key or as an element of another set.
# Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces,
# for example: {'jack', 'sjoerd'}, in addition to the set constructor.
# The constructors for both classes work the same:
# class set([iterable])
# class frozenset([iterable])
# Return a new set or frozenset object whose elements are taken from iterable.
# The elements of a set must be hashable.
# To represent sets of sets, the inner sets must be frozenset objects.
# If iterable is not specified, a new empty set is returned.
from typing import Set, Any, Union

#My answer
a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
c = [i for i in a if i in b]
d = [i for i in a if i not in b]
e = [i + j for i in b for j in a]
print(sorted(c))
print(sorted(d))
print(sorted(e))
print(sorted(set(a)))
print(sorted(set(b)))
print(sorted(set(a) & set(b)))
print(sorted(set(a) | set(b)))

#My extra answer
import random
a = random.sample(range(1,30),12)
b = random.sample(range(1,100),16)
c = [i for i in a if i in b]
print(sorted(list(set(c))))

